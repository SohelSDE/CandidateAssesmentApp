const questionAnswerData = [
    {
      id: 1,
      expLevel: 'Beginner',
      question: 'What is JavaScript?',
      answer: 'JavaScript is a programming language...',
      topic: 'JavaScript Basics',
      relatedTopic: ['Variables', 'Functions'],
    },
    {
      id: 2,
      expLevel: 'Intermediate',
      question: 'Explain closures in JavaScript.',
      answer: 'Closures allow functions to retain access to variables...',
      topic: 'JavaScript Concepts',
      relatedTopic: ['Scope', 'Functions'],
    },
    {
      id: 3,
      expLevel: 'Beginner',
      question: 'How do you declare a variable in JavaScript?',
      answer: 'You can declare a variable using the "var", "let", or "const" keyword...',
      topic: 'Variables',
      relatedTopic: ['JavaScript Basics'],
    },
    {
      id: 4,
      expLevel: 'Beginner',
      question: 'What is the difference between "let" and "const"?',
      answer: '"let" allows you to reassign values, while "const" does not...',
      topic: 'Variables',
      relatedTopic: ['JavaScript Basics'],
    },
    {
      id: 5,
      expLevel: 'Intermediate',
      question: 'Explain the concept of hoisting in JavaScript.',
      answer: 'Hoisting is a JavaScript behavior where variable and function declarations are moved to the top of their containing scope...',
      topic: 'JavaScript Concepts',
      relatedTopic: ['Scope'],
    },
    {
      id: 6,
      expLevel: 'Beginner',
      question: 'What are the basic data types in JavaScript?',
      answer: 'JavaScript has six primitive data types: string, number, boolean, null, undefined, and symbol...',
      topic: 'Data Types',
      relatedTopic: ['JavaScript Basics'],
    },
    {
      id: 7,
      expLevel: 'Intermediate',
      question: 'Explain the difference between == and === in JavaScript.',
      answer: '== performs type coercion, while === requires both value and type to be the same...',
      topic: 'Operators',
      relatedTopic: ['JavaScript Concepts'],
    },
    {
      id: 8,
      expLevel: 'Beginner',
      question: 'How do you create a function in JavaScript?',
      answer: 'You can create a function using the "function" keyword...',
      topic: 'Functions',
      relatedTopic: ['JavaScript Basics'],
    },
    {
      id: 9,
      expLevel: 'Intermediate',
      question: 'What is the purpose of the "this" keyword in JavaScript?',
      answer: 'The "this" keyword refers to the object to which the function belongs...',
      topic: 'Functions',
      relatedTopic: ['JavaScript Concepts'],
    },
    {
      id: 10,
      expLevel: 'Beginner',
      question: 'What is an array in JavaScript?',
      answer: 'An array is a data structure that stores a collection of elements...',
      topic: 'Arrays',
      relatedTopic: ['JavaScript Basics'],
    },
    {
      id: 11,
      expLevel: 'Beginner',
      question: 'How do you add a comment in JavaScript?',
      answer: 'You can add a single-line comment using "//" and a multi-line comment using "/* */"...',
      topic: 'Comments',
      relatedTopic: ['JavaScript Basics'],
    },
    {
      id: 12,
      expLevel: 'Intermediate',
      question: 'What is the DOM in JavaScript?',
      answer: 'The DOM (Document Object Model) is a programming interface for web documents...',
      topic: 'DOM Manipulation',
      relatedTopic: ['JavaScript Concepts'],
    },
    {
      id: 13,
      expLevel: 'Beginner',
      question: 'How do you include external JavaScript files in an HTML document?',
      answer: 'You can use the <script> tag with the "src" attribute to include external JavaScript files...',
      topic: 'HTML Integration',
      relatedTopic: ['JavaScript Basics'],
    },
    {
      id: 14,
      expLevel: 'Intermediate',
      question: 'What is the difference between "null" and "undefined"?',
      answer: '"null" is an assigned value representing the absence of an object value, while "undefined" indicates a variable that has not been assigned a value...',
      topic: 'Data Types',
      relatedTopic: ['JavaScript Concepts'],
    },
    {
      id: 15,
      expLevel: 'Beginner',
      question: 'How do you write a conditional statement in JavaScript?',
      answer: 'You can use "if", "else if", and "else" statements for conditional logic...',
      topic: 'Conditional Statements',
      relatedTopic: ['JavaScript Basics'],
    },
    {
      id: 16,
      expLevel: 'Beginner',
      question: 'What is the purpose of the "return" keyword in a function?',
      answer: 'The "return" keyword specifies the value to be returned by a function...',
      topic: 'Functions',
      relatedTopic: ['JavaScript Basics'],
    },
    {
      id: 17,
      expLevel: 'Intermediate',
      question: 'Explain the concept of event handling in JavaScript.',
      answer: 'Event handling is a mechanism to respond to events, such as user actions or system events, in a web application...',
      topic: 'Event Handling',
      relatedTopic: ['JavaScript Concepts'],
    },
    {
      id: 18,
      expLevel: 'Beginner',
      question: 'What is the purpose of the "console.log" function?',
      answer: 'The "console.log" function is used to print output to the console for debugging and logging purposes...',
      topic: 'Debugging',
      relatedTopic: ['JavaScript Basics'],
    },
    {
      id: 19,
      expLevel: 'Intermediate',
      question: 'How do you use the "map" function in JavaScript?',
      answer: 'The "map" function is used to iterate over an array and transform each element...',
      topic: 'Arrays',
      relatedTopic: ['JavaScript Concepts'],
    },
    {
      id: 20,
      expLevel: 'Beginner',
      question: 'What is the difference between "var", "let", and "const"?',
      answer: '"var" has function-scoping, while "let" and "const" have block-scoping. "const" is used for variables that should not be reassigned...',
      topic: 'Variables',
      relatedTopic: ['JavaScript Basics'],
    },
    {
      id: 21,
      expLevel: 'Beginner',
      question: 'How do you create an object in JavaScript?',
      answer: 'You can create an object using the object literal syntax or the "Object" constructor...',
      topic: 'Objects',
      relatedTopic: ['JavaScript Basics'],
    },
    {
      id: 22,
      expLevel: 'Intermediate',
      question: 'Explain the concept of asynchronous programming in JavaScript.',
      answer: 'Asynchronous programming allows tasks to be executed concurrently without blocking the execution of the main program...',
      topic: 'Asynchronous Programming',
      relatedTopic: ['JavaScript Concepts'],
    },
    {
      id: 23,
      expLevel: 'Beginner',
      question: 'What is the purpose of the "typeof" operator?',
      answer: 'The "typeof" operator is used to determine the data type of a variable or expression...',
      topic: 'Operators',
      relatedTopic: ['JavaScript Basics'],
    },
    {
      id: 24,
      expLevel: 'Intermediate',
      question: 'How do you handle errors in JavaScript?',
      answer: 'You can use try-catch blocks to handle errors and prevent them from crashing the program...',
      topic: 'Error Handling',
      relatedTopic: ['JavaScript Concepts'],
    },
    {
      id: 25,
      expLevel: 'Beginner',
      question: 'What is the purpose of the "alert" function?',
      answer: 'The "alert" function is used to display a dialog box with a specified message and an OK button...',
      topic: 'User Interaction',
      relatedTopic: ['JavaScript Basics'],
    },
    {
      id: 26,
      expLevel: 'Intermediate',
      question: 'Explain the difference between "==", "===", and "Object.is" in JavaScript.',
      answer: '"==": equality with type coercion, "===": strict equality without type coercion, "Object.is": strict equality with some differences in edge cases...',
      topic: 'Operators',
      relatedTopic: ['JavaScript Concepts'],
    },
    {
      id: 27,
      expLevel: 'Beginner',
      question: 'What is a callback function in JavaScript?',
      answer: 'A callback function is a function passed as an argument to another function, which will be invoked or executed later...',
      topic: 'Functions',
      relatedTopic: ['JavaScript Basics'],
    },
    {
      id: 28,
      expLevel: 'Beginner',
      question: 'How do you comment out multiple lines in JavaScript?',
      answer: 'You can use the "/* */" syntax to comment out multiple lines...',
      topic: 'Comments',
      relatedTopic: ['JavaScript Basics'],
    },
    {
      id: 29,
      expLevel: 'Intermediate',
      question: 'What is the difference between "for" and "while" loops in JavaScript?',
      answer: '"for" loops are used when the number of iterations is known, while "while" loops are used when the condition for termination is known...',
      topic: 'Loops',
      relatedTopic: ['JavaScript Concepts'],
    },
    {
      id: 30,
      expLevel: 'Beginner',
      question: 'How do you check the length of an array in JavaScript?',
      answer: 'You can use the "length" property of an array to determine its length...',
      topic: 'Arrays',
      relatedTopic: ['JavaScript Basics'],
    },
  // ... (Previous questions)

{
    id: 31,
    expLevel: 'Intermediate',
    question: 'What is the Event Loop in JavaScript?',
    answer: 'The Event Loop is a mechanism that allows asynchronous tasks to be executed in a non-blocking way...',
    topic: 'Asynchronous Programming',
    relatedTopic: ['JavaScript Concepts'],
  },
  {
    id: 32,
    expLevel: 'Intermediate',
    question: 'Explain the concept of prototypal inheritance in JavaScript.',
    answer: 'Prototypal inheritance is a way objects inherit properties and behaviors from other objects through a prototype chain...',
    topic: 'Objects',
    relatedTopic: ['JavaScript Concepts'],
  },
  {
    id: 33,
    expLevel: 'Intermediate',
    question: 'How does the "bind" method work in JavaScript?',
    answer: 'The "bind" method creates a new function that, when called, has its "this" keyword set to a specified value...',
    topic: 'Functions',
    relatedTopic: ['JavaScript Concepts'],
  },
  {
    id: 34,
    expLevel: 'Intermediate',
    question: 'What is the purpose of the "Promise" object in JavaScript?',
    answer: 'Promises are used for asynchronous programming and represent a value that might be available now, or in the future, or never...',
    topic: 'Asynchronous Programming',
    relatedTopic: ['JavaScript Concepts'],
  },
  {
    id: 35,
    expLevel: 'Intermediate',
    question: 'Explain the concept of middleware in the context of web development.',
    answer: 'Middleware functions are functions that have access to the request, response, and the next function in the application’s request-response cycle...',
    topic: 'Web Development',
    relatedTopic: ['Express.js', 'Middleware'],
  },
  {
    id: 36,
    expLevel: 'Intermediate',
    question: 'What are arrow functions in JavaScript?',
    answer: 'Arrow functions are a concise way to write function expressions in JavaScript, with a shorter syntax compared to traditional function expressions...',
    topic: 'Functions',
    relatedTopic: ['JavaScript Concepts'],
  },
  {
    id: 37,
    expLevel: 'Intermediate',
    question: 'Explain the concept of higher-order functions in JavaScript.',
    answer: 'Higher-order functions are functions that can take other functions as arguments or return them as results...',
    topic: 'Functions',
    relatedTopic: ['JavaScript Concepts'],
  },
  {
    id: 38,
    expLevel: 'Intermediate',
    question: 'What is the "Fetch API" in JavaScript?',
    answer: 'The Fetch API is a modern interface for fetching resources (including across the network) and is a more powerful and flexible replacement for the older XMLHttpRequest...',
    topic: 'Web APIs',
    relatedTopic: ['Fetch API'],
  },
  {
    id: 39,
    expLevel: 'Intermediate',
    question: 'Explain the concept of "currying" in JavaScript.',
    answer: 'Currying is a technique of translating a function with multiple arguments into a sequence of functions with a single argument...',
    topic: 'Functional Programming',
    relatedTopic: ['JavaScript Concepts'],
  },
  {
    id: 40,
    expLevel: 'Intermediate',
    question: 'What are the differences between "localStorage" and "sessionStorage" in web storage?',
    answer: '"localStorage" stores data with no expiration time, while "sessionStorage" stores data only for the duration of the page session...',
    topic: 'Web Storage',
    relatedTopic: ['localStorage', 'sessionStorage'],
  },
  {
    id: 41,
    expLevel: 'Intermediate',
    question: 'Explain the concept of debouncing in JavaScript.',
    answer: 'Debouncing is a programming practice used to ensure that time-consuming tasks do not fire so often, making them more efficient...',
    topic: 'Optimization',
    relatedTopic: ['JavaScript Concepts'],
  },
  {
    id: 42,
    expLevel: 'Intermediate',
    question: 'What are the differences between "call", "apply", and "bind" in JavaScript?',
    answer: '"call" and "apply" are used to invoke a function with a specified "this" value and arguments. "bind" creates a new function with a specified "this" value but does not invoke it immediately...',
    topic: 'Functions',
    relatedTopic: ['JavaScript Concepts'],
  },
  {
    id: 43,
    expLevel: 'Intermediate',
    question: 'Explain the concept of "memoization" in JavaScript.',
    answer: 'Memoization is an optimization technique where the results of expensive function calls are cached, so that when the same inputs occur again, the result is returned from the cache...',
    topic: 'Optimization',
    relatedTopic: ['JavaScript Concepts'],
  },
  {
    id: 44,
    expLevel: 'Intermediate',
    question: 'How do you handle state management in a React application?',
    answer: 'State management in React involves lifting state up, using the "useState" hook, and managing state in functional components...',
    topic: 'React.js',
    relatedTopic: ['State Management'],
  },
  {
    id: 45,
    expLevel: 'Intermediate',
    question: 'What are "promises" and "observables" in the context of asynchronous programming?',
    answer: 'Promises are a one-time guaranteed return of some future value, while observables handle a sequence of values over time...',
    topic: 'Asynchronous Programming',
    relatedTopic: ['Promises', 'Observables'],
  },
  {
    id: 46,
    expLevel: 'Intermediate',
    question: 'Explain the concept of the "useEffect" hook in React.',
    answer: 'The "useEffect" hook in React is used for handling side effects in functional components, such as data fetching, subscriptions, or manually changing the DOM...',
    topic: 'React.js',
    relatedTopic: ['Hooks', 'useEffect'],
  },
  {
    id: 47,
    expLevel: 'Intermediate',
    question: 'What is the purpose of the "spread" operator in JavaScript?',
    answer: 'The "spread" operator is used to unpack elements from an array or properties from an object and spread them into another array or object...',
    topic: 'JavaScript Concepts',
    relatedTopic: ['Arrays', 'Objects'],
  },
  {
    id: 48,
    expLevel: 'Intermediate',
    question: 'Explain the concept of "memo" in React.',
    answer: 'Memoization in React involves using the "memo" higher-order component to optimize the rendering of functional components by caching the result...',
    topic: 'React.js',
    relatedTopic: ['Optimization', 'Memoization'],
  },
  {
    id: 49,
    expLevel: 'Intermediate',
    question: 'What are the differences between "let", "const", and "var" in terms of scoping and hoisting?',
    answer: '"let" and "const" have block-scoping and are not hoisted, while "var" has function-scoping and is hoisted...',
    topic: 'Variables',
    relatedTopic: ['JavaScript Concepts'],
  },
  {
    id: 50,
    expLevel: 'Intermediate',
    question: 'Explain the concept of "throttling" in JavaScript.',
    answer: 'Throttling is a programming practice used to ensure that the function is not called so often, making it more efficient...',
    topic: 'Optimization',
    relatedTopic: ['JavaScript Concepts'],
  },
  
  // ... (More questions if needed)
  ];
  
  export default questionAnswerData;
  
  
  